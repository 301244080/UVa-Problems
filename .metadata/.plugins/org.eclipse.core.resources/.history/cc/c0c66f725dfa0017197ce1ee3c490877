import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Test {
	
	public static ArrayList<char[][]> boards = new ArrayList<>();
	public static char[][] board = new char[8][8];
	public static ArrayList<String> raw = new ArrayList<>();
	public static final int WHITEKING = 75;
	public static final int BLACKKING = 107;
	public static final int WHITEPAWN = 80;
	public static final int BLACKPAWN = 112;
	public static final int WHITEROOK = 82;
	public static final int BLACKROOK = 114;
	public static final int WHITEBISHOP = 66;
	public static final int BLACKBISHOP = 98;
	public static final int WHITEQUEEN = 81;
	public static final int BLACKQUEEN = 113;
	public static final int WHITEKNIGHT = 75;	
	public static final int BLACKKNIGHT = 107;
	
	
	public static class Point {
		int x;
		int y;
		public Point(int a, int b) {
			x = a;
			y = b;
		}
	}
	
	public static class Chess {
		int[] x;
		int[] y;
		int steps;
		int directions;
		public Chess() {
			x = new int[10];
			y = new int[10];
			steps = 0;
			directions = 0;
		}
	}
	
	
	

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		String filePath = "C:\\Users\\yy957\\Desktop\\ACM\\Test\\inputs\\p10196.txt";
		
		fastRead();
		
		System.out.println("File reading complete");

	}
	
	// fastest I/O method in Java
	public static void fastRead() throws IOException {
		
		// Use File Stream Reader
		BufferedReader br = new BufferedReader (new FileReader ("C:\\Users\\yy957\\Desktop\\ACM\\Test\\inputs\\p10196.txt"));
		
		// Use Input Steam Reader
//		BufferedReader br = new BufferedReader (new InputStreamReader(System.in));
				
		String line;
		int lineNum = 0;
		int[][] curtBoard = new int[8][8];		
		boolean isEmpty = true;
		Point WK = null;
		Point BK = null;
		int GameNum = 1;
		
		Chess[] pieces = new Chess[6];
		
		for (int i = 0; i < pieces.length; i++)
			pieces[i] = new Chess();
		
		// White Pawn
		pieces[0].x[0] = -1;
		pieces[0].y[0] = 1;
		pieces[0].x[1] = -1;
		pieces[0].y[1] = -1;
		
		pieces[0].steps = 1;
		pieces[0].directions = 2;
		
		// Rook
		pieces[1].x[0] = 1;
		pieces[1].y[0] = 0;
		pieces[1].x[1] = -1;
		pieces[1].y[1] = 0;
		pieces[1].x[2] = 0;
		pieces[1].y[2] = 1;
		pieces[1].x[3] = 0;
		pieces[1].y[3] = -1;
		
		pieces[1].steps = 8;
		pieces[1].directions = 4;
		
		// Bishop
		pieces[2].x[0] = 1;
		pieces[2].y[0] = 1;
		pieces[2].x[1] = 1;
		pieces[2].y[1] = -1;
		pieces[2].x[2] = -1;
		pieces[2].y[2] = 1;
		pieces[2].x[3] = -1;
		pieces[2].y[3] = -1;
		
		pieces[2].steps = 8;
		pieces[2].directions = 4;
		
		// Queen
		pieces[3].x[0] = 1;
		pieces[3].y[0] = 0;
		pieces[3].x[1] = -1;
		pieces[3].y[1] = 0;
		pieces[3].x[2] = 0;
		pieces[3].y[2] = 1;
		pieces[3].x[3] = 0;
		pieces[3].y[3] = -1;
		pieces[3].x[4] = 1;
		pieces[3].y[4] = 1;
		pieces[3].x[5] = 1;
		pieces[3].y[5] = -1;
		pieces[3].x[6] = -1;
		pieces[3].y[6] = 1;
		pieces[3].x[7] = -1;
		pieces[3].y[7] = -1;
		
		pieces[3].steps = 8;
		pieces[3].directions = 8;
		
		
		// Knight
		pieces[4].x[0] = -1;
		pieces[4].y[0] = 2;
		pieces[4].x[1] = 1;
		pieces[4].y[1] = 2;
		pieces[4].x[2] = 1;
		pieces[4].y[2] = -2;
		pieces[4].x[3] = -1;
		pieces[4].y[3] = -2;
		pieces[4].x[4] = -2;
		pieces[4].y[4] = 1;
		pieces[4].x[5] = 2;
		pieces[4].y[5] = 1;
		pieces[4].x[6] = 2;
		pieces[4].y[6] = -1;
		pieces[4].x[7] = -2;
		pieces[4].y[7] = -1;
		
		pieces[4].steps = 1;
		pieces[4].directions = 8;
		
		// Black Pawn
		pieces[5].x[0] = 1;
		pieces[5].y[0] = -1;
		pieces[5].x[1] = 1;
		pieces[5].y[1] = -1;
		
		
		while( (line = br.readLine() ) != null) {			
			// A reading of one board is complete			
			if (line.equals("") || lineNum == 8) {											
				checkTheCheck(curtBoard, WK, BK, pieces, GameNum);
				GameNum++;
				
				// Start reading a new board
				lineNum = 0;								
				line = br.readLine();
				WK = null;
				BK = null;
			}
			char[] currLine = line.toCharArray();
			for (int i = 0; i < 8; i++) {
				char c = currLine[i];
				if (c != '.') {
					isEmpty = false;
				}
				if ((int) c == WHITEKING) {
					WK = new Point(lineNum, i);
				}
				else if ((int) c == BLACKKING) {
					BK = new Point(lineNum, i);
				}
				curtBoard[lineNum][i] = (int) c;
			}
			lineNum++;
		}
		if (lineNum == 8) {
			checkTheCheck(curtBoard, WK, BK, pieces, GameNum);
		}
	}
	
	// > 96 lower case, < 96 upper case
	public static void checkTheCheck(int[][] curtBoard, Point WK, Point BK, Chess[] pieces, int GameNum) {
		if (WK == null || BK == null) {
			return;
		}
		System.out.println("Printing current board");
		boolean blackCheck, whiteCheck;
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				int curtPiece = curtBoard[i][j];
				if (curtPiece < 96) {				
					// Handle white pieces
					switch (curtPiece) {
					case WHITEPAWN:				
						if (movePiece(curtBoard, i, j, pieces[0], false, BLACKKING, GameNum))
							return;
						break;
					case WHITEROOK:
						if (movePiece(curtBoard, i, j, pieces[1], false, BLACKKING, GameNum))
							return;
						break;
					case WHITEBISHOP:
						if (movePiece(curtBoard, i, j, pieces[2], false, BLACKKING, GameNum))
							return;
						break;
					case WHITEQUEEN:
						if (movePiece(curtBoard, i, j, pieces[3], false, BLACKKING, GameNum))
							return;
						break;
					case WHITEKNIGHT:
						if (movePiece(curtBoard, i, j, pieces[4], true, BLACKKING, GameNum))
							return;
					default:
						break;
					}														
				}
				
				else {
					// Handle black pieces
					switch (curtPiece) {
					case BLACKPAWN:				
						if (movePiece(curtBoard, i, j, pieces[5], false, WHITEKING, GameNum))
							return;
						break;
					case BLACKROOK:
						if (movePiece(curtBoard, i, j, pieces[1], false, WHITEKING, GameNum))
							return;
						break;
					case BLACKBISHOP:
						if (movePiece(curtBoard, i, j, pieces[2], false, WHITEKING, GameNum))
							return;
						break;
					case BLACKQUEEN:
						if (movePiece(curtBoard, i, j, pieces[3], false, WHITEKING, GameNum))
							return;
						break;
					case BLACKKNIGHT:
						if (movePiece(curtBoard, i, j, pieces[4], true, WHITEKING, GameNum))
							return;
					default:
						break;
					}
					
				}
				System.out.print(curtBoard[i][j]);				
			}
			System.out.println();
		}				
		String res = "Game #" + GameNum + ": no king is in check";
		System.out.println(res);
	}	
	
	public static boolean movePiece(int[][] Board, int x, int y, Chess piece, boolean isKnight, int king, int GameNum) {
		for (int i = 0; i < piece.directions; i++) {
			for (int j = 0; j < piece.steps; j++) {
				x += piece.x[i];
				y += piece.y[i];
				if (x < 0 || x > 7 || y < 0 || y > 7) {
					return false;
				}
				int nextPiece = Board[x][y];

				if (nextPiece == king) {
					// print info
					if (king == WHITEKING)
						printWinMessage(false, GameNum);
					else 
						printWinMessage(true, GameNum);
					return true;
				}				
			}
		}
		return false;
	}
	
	public static void printWinMessage(boolean whiteWins, int gameNum) {
		String res = "Game #" + gameNum + ": ";
		if (whiteWins) {
			res += "black king is in check";
		}
		else {
			res += "white king is in check";
		}
		
		System.out.println(res);
	}
}
